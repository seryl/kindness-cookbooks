; Generated by Chef for <%= node[:fqdn] %>
; Local modifications will be overwritten.

(let* ((emacs-version "2.6.7")
       (tools-path
        (concat "/usr/local/lib/erlang/lib/tools-" emacs-version "/emacs")))
  (when (file-exists-p tools-path)
    (setq load-path (cons tools-path load-path))
    (setq erlang-root-dir "/usr/local/lib/erlang")
    (setq exec-path (cons "/usr/local/lib/erlang/bin" exec-path))
    (require 'erlang-start)
    (defvar inferior-erlang-prompt-timeout t)))

(add-hook 'erlang-mode-hook
          (lambda ()
            (define-key erlang-mode-map "\C-m"
              'erlang-reindent-then-newline-and-indent)
             (add-hook 'local-write-file-hooks
                        '(lambda()
                           (save-excursion
                             (untabify (point-min) (point-max))
                             (delete-trailing-whitespace))))
             (set (make-local-variable 'tab-width) 2)
             (set (make-local-variable 'indent-tabs-mode) 'nil)))

(defun erlang-reindent-then-newline-and-indent ()
  "Reindents the current line then creates an indented newline."
  (interactive "*")
  (newline)
  (save-excursion
    (end-of-line 0)
    (indent-according-to-mode)
    (delete-region (point) (progn (skip-chars-backward " \t") (point))))
  (when (erlang-previous-line-is-comment)
      (insert "% "))
  (indent-according-to-mode))

(defun erlang-previous-line-is-comment ()
  "Returns `t' if the previous line is an Erlang comment."
  (save-excursion
    (forward-line -1)
    (erlang-line-is-comment)))

(defun erlang-line-is-comment ()
  "Returns `t' if the current line is an Erlang comment."
  (save-excursion
    (beginning-of-line)
    (search-forward "#" (point-at-eol) t)))
